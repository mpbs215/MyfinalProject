<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
		

<!-- dbcp 기술 설정하기
		  원래 하던 방법은 이런 방법이지만 spring에서는 또 다른 방법을 제공해준다
 -->
<!-- <beans:bean	id="dataSource" 
            class="org.apache.commons.dbcp.BasicDataSource"
			p:driverClassName="oracle.jdbc.OracleDriver"
			p:url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
			p:username="scott" p:password="tiger"  
			p:maxActive="10"/>  -->
			
	
	 <!-- 외부설정문서(properties파일) 가져오기 -->
  <beans:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
  <beans:property name="locations"><!-- setLocations()호출 -->
     <beans:value>/WEB-INF/spring/appServlet/dbInfo.properties</beans:value>
  </beans:property>
</beans:bean>

<!-- oracle 연결!!!!! -->
<!-- dbcp기술 설정하기 -->
<beans:bean	id="dataSource" 
   class="org.springframework.jdbc.datasource.DriverManagerDataSource"
				p:driverClassName="${driverName}"
				p:url="${url}"
				p:username="${userName}"
				 p:password="${userPass}"  />
				
 <!--JDBC로 사용하기 위해서는 여기까지 적용해주면 되고 MYbatis를 사용하기 위해서는 밑에 부분 좀더 필요 -->	
 	
 	
 	
 <!-- SqlSessionFactoryBean은 MyBatis의 주요 클래스 이름과 같다. -->	
 <!-- SqlSessionFactoryBean이 Factory를 구해오는 역할을 한다. -->
 <!-- p:dataSource, p:config~ = Bean객체가 생성되면서 주입되는 2개의 setter메소드 -->
 
<!-- Spring에서  org.mybatis.spring.SqlSessionFactoryBean" 클래스가 생성이되면 내부적으로 SqlSEssionFactory 객체
		  를 생성하는 것과 같다
-->
<!-- Factory를 구해오기 위해서는 SqlMapConfig.xml이 필요하다 -->
			
   <beans:bean id="sqlSessionFactory" 
   class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="mapperLocations" value="classpath:mapper/*Mapper.xml" /><!--  Mapper.xml 로끝나는 mppter모두 등록 -->
		<beans:property name="typeAliasesPackage" value="kosta.mvc.model.dto" /><!-- dto폴더안에있는 클래스들 별칭 자동만듦 - 클래스명의 첫글만 소문자!! -->
		<beans:property name="configLocation" value="classpath:mapper/SqlMapConfig.xml" />
	</beans:bean>

	
	<!-- SqlMapConfig.xml에서 잡아주었던 설정들을 모두 spring에서는 축소하여 잡아주므로 필요없지만 필요한 경우에는 설정을 잡아줘야한다. -->
	<!-- classpath 는 classes 폴더를 의미 -->
	<!-- classpath 는 resource폴더가 아닌 server에 저장되는 위치 이므로 src/main/resources가 classpath이다 -->
	<!-- 전에 SqlConfig~ 에서 설정해주던 것을 Setter메소드를 이용하여 모두 설정해줄 수 있다. -->
	 
  <beans:bean id="sqlSession"
     class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactory"/>
	</beans:bean>
	<!-- DAO에서 사용하기 위해 SqlSession이 필요한데 이것을 만들어주는 beans 객체, DAO에서 @Autowired로 주입 받을 때 사용 -->
	<!-- SqlSessionTemplate가 생성될 때 첫번째 인수로 sqlSessionFactory을 주입하는 것-->
	
	
	<!-- == 트랜잭션의 설정 
	
			DataSourceTransactionManager에 dataSource를 전달해줌
			propagation -> 기존의 것을 사용할 것인지 새로운 것을 사용할 것인지 정하는 것
			isolation -> 동일한 것을 접근 하였을 때에 보이게 할 것인지 감출 것인지 정하는 것
			no-rollback-for -> 
	== -->

<!--  참조 관계를 잘 확인해보기-->
	
	<beans:bean	id="transactionManager"
	 class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
				p:dataSource-ref="dataSource" />
	
	
	<!-- 어노테이션으로 적용 가능 시작 하므로 주석처리  -->
	
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method  name="*" propagation="REQUIRED"  />
		</tx:attributes>
	</tx:advice>

	 <aop:config>
		<aop:advisor advice-ref="txAdvice" 			
		  pointcut="execution(public * kosta.mvc.service.*.*(..))" />
	 </aop:config> 
	 
 -->	 
	<!-- 어노테이션으로 적용가능 한 것 끝, 하단에 @설정을 해주어야한다.--> 
	 
	 
	<!-- service라는 패키지에 들어가는 모든 메소드는 pointcut의 대상이 된다 -->
	
		<!-- spring transaction annotaion설정 --> 
	 <tx:annotation-driven transaction-manager="transactionManager"/> 
	 
	 <context:component-scan base-package="kosta.mvc.model"/>

</beans:beans>